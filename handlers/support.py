import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from config import settings
from keyboards.inline import help_keyboard, cancel_support_keyboard, back_to_menu_keyboard
from states.order_states import SupportStates
from services.admin_notifications import send_support_message

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "help")
async def show_help_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    await state.clear()
    
    help_text = (
        "‚ÑπÔ∏è <b>–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏</b>\n\n"
        "üìù –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, "
        "–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!"
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=help_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "contact_admin")
async def start_contact_admin(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await state.set_state(SupportStates.entering_subject)
    
    await callback.message.edit_text(
        "üìù <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
        "üìã –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=cancel_support_keyboard()
    )
    await callback.answer()

@router.message(SupportStates.entering_subject)
async def process_support_subject(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    subject = message.text.strip()
    
    if len(subject) < 3:
        await message.answer(
            "‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)."
        )
        return
    
    if len(subject) > 100:
        await message.answer(
            "‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    await state.update_data(subject=subject)
    await state.set_state(SupportStates.entering_message)
    
    await message.answer(
        "‚úÖ <b>–¢–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        f"üìã <b>–¢–µ–º–∞:</b> {subject}\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
        reply_markup=cancel_support_keyboard()
    )

@router.message(SupportStates.entering_message)
async def process_support_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_message = message.text.strip()
    
    if len(user_message) < 10:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    
    if len(user_message) > 1000:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    subject = data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'telegram_id': message.from_user.id,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'username': message.from_user.username
    }
    
    # –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    support_data = {
        'subject': subject,
        'message': user_message
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_support_message(support_data, user_data, message.bot)
        
        await message.answer(
            "‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üìã <b>–¢–µ–º–∞:</b> {subject}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {user_message}\n\n"
            "üì± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=back_to_menu_keyboard()
        )
        
        logger.info(f"Support message sent from user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Failed to send support message from user {message.from_user.id}: {e}")
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é.",
            reply_markup=back_to_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data == "cancel_support")
async def cancel_support(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏.",
        reply_markup=back_to_menu_keyboard()
    )
    await callback.answer("Request cancelled")