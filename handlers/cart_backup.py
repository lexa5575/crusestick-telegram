import logging
from typing import Dict
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import settings
from keyboards.inline import (
    cart_keyboard, cart_item_keyboard, checkout_keyboard, 
    order_confirmation_keyboard, back_to_menu_keyboard
)
from services.cart_service import cart_service
from services.api_client import api_client
from states.order_states import OrderStates
from utils.formatters import format_cart_message, format_order_confirmation

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_product_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    
    try:
        logger.info(f"Add to cart callback received: {callback.data}")
        
        product_id = int(callback.data.split(":")[1])
        user_id = callback.from_user.id
        
        logger.info(f"Adding product {product_id} to cart for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API
        async with api_client as client:
            products = await client.get_products()
            product = next((p for p in products if p['id'] == product_id), None)
        
        if not product:
            logger.warning(f"Product {product_id} not found")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_service.add_to_cart(user_id, product)
        logger.info(f"Product {product['name']} added to cart for user {user_id}")
        
        await callback.answer(f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        
    except Exception as e:
        logger.error(f"Error adding product to cart: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)

@router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart(user_id)
    cart_total = cart_service.get_cart_total(user_id)
    
    message_text = format_cart_message(cart_items, cart_total)
    
    if state:
        await state.set_state(OrderStates.viewing_cart)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=cart_keyboard(cart_items, user_id)
    )

@router.callback_query(F.data.startswith("edit_cart_item:"))
async def edit_cart_item(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    
    product_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    cart_items = cart_service.get_cart(user_id)
    item = next((item for item in cart_items if item['id'] == product_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
        return
    
    message_text = (
        f"üìù <b>{item['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: ${item['price']}\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
        f"üíµ –°—É–º–º–∞: ${item['total']}\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=cart_item_keyboard(product_id, item['quantity'])
    )

@router.callback_query(F.data.startswith("cart_quantity:"))
async def update_cart_quantity(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    
    _, product_id, new_quantity = callback.data.split(":")
    product_id = int(product_id)
    new_quantity = int(new_quantity)
    user_id = callback.from_user.id
    
    if new_quantity <= 0:
        cart_service.remove_from_cart(user_id, product_id)
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        await show_cart(callback, None)
        return
    
    cart_service.update_quantity(user_id, product_id, new_quantity)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    cart_items = cart_service.get_cart(user_id)
    item = next((item for item in cart_items if item['id'] == product_id), None)
    
    if item:
        message_text = (
            f"üìù <b>{item['name']}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: ${item['price']}\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
            f"üíµ –°—É–º–º–∞: ${item['total']}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=cart_item_keyboard(product_id, item['quantity'])
        )
    
    await callback.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_quantity}")

@router.callback_query(F.data.startswith("remove_from_cart:"))
async def remove_from_cart(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    
    product_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    cart_service.remove_from_cart(user_id, product_id)
    
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await show_cart(callback, None)

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    
    user_id = callback.from_user.id
    cart_service.clear_cart(user_id)
    
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await show_cart(callback, None)

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart(user_id)
    
    if not cart_items:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    await state.set_state(OrderStates.entering_contact)
    
    await callback.message.edit_text(
        "üìû <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +1234567890",
        reply_markup=back_to_menu_keyboard()
    )

@router.message(OrderStates.entering_contact)
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith('+') or len(phone) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +1234567890"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=phone)
    await state.set_state(OrderStates.entering_address)
    
    await message.answer(
        "üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "‚Ä¢ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ê–¥—Ä–µ—Å\n"
        "‚Ä¢ –ì–æ—Ä–æ–¥, —à—Ç–∞—Ç, ZIP –∫–æ–¥\n"
        "‚Ä¢ –°—Ç—Ä–∞–Ω–∞"
    )

@router.message(OrderStates.entering_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    
    address = message.text.strip()
    
    if len(address) < 20:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    await state.update_data(address=address)
    await state.set_state(OrderStates.selecting_payment)
    
    user_id = message.from_user.id
    cart_items = cart_service.get_cart(user_id)
    cart_total = cart_service.get_cart_total(user_id)
    
    order_data = await state.get_data()
    
    confirmation_text = format_order_confirmation(cart_items, cart_total, order_data)
    
    await message.answer(
        confirmation_text,
        reply_markup=checkout_keyboard()
    )

@router.callback_query(F.data.startswith("payment:"), OrderStates.selecting_payment)
async def select_payment_method(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    
    payment_method = callback.data.split(":")[1]
    await state.update_data(payment_method=payment_method)
    
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart(user_id)
    cart_total = cart_service.get_cart_total(user_id)
    order_data = await state.get_data()
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    final_total = cart_total
    discount_text = ""
    
    if order_data.get('promocode'):
        discount_type = order_data.get('discount_type', 'percentage')
        discount_value = order_data.get('discount_value', 0)
        logger.info(f"Payment method selection - discount_type: {discount_type}, discount_value: {discount_value}")
        
        if discount_type == 'fixed':
            discount_amount = min(float(discount_value), cart_total)
            promo_text = f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {order_data['promocode']} (-${discount_amount:.2f})\n"
        else:  # percentage
            discount_amount = cart_total * (float(discount_value) / 100)
            promo_text = f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {order_data['promocode']} (-{discount_value}%)\n"
        
        final_total = cart_total - discount_amount
        discount_text = (
            f"{promo_text}"
            f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> -${discount_amount:.2f}\n"
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${final_total:.2f}\n\n"
        )
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    confirmation_text = (
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"{format_order_confirmation(cart_items, cart_total, order_data)}\n\n"
        f"{discount_text}"
        f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_method.upper()}\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
    )
    
    await state.set_state(OrderStates.confirming_order)
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=order_confirmation_keyboard()
    )

async def handle_zelle_payment(callback: CallbackQuery, order_id: int, total_amount: float, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Zelle —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Zelle —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    async with api_client as client:
        zelle_data = await client.get_user_zelle(user_id)
    
    if zelle_data.get('configured', False):
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        await send_personalized_zelle_info(callback, order_id, total_amount, zelle_data)
    else:
        # –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await send_waiting_message(callback, order_id, total_amount)
        await notify_admins_new_order(callback.from_user, order_id)

async def send_waiting_message(callback: CallbackQuery, order_id: int, total_amount: float):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    waiting_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üíµ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${total_amount}</b>\n\n"
        f"‚è≥ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –∂–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>\n\n"
        f"üì± –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã Zelle –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
        f"üïê –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    await callback.message.edit_text(
        waiting_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def send_personalized_zelle_info(callback: CallbackQuery, order_id: int, total_amount: float, zelle_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö Zelle —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    payment_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üíµ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Zelle</b>\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${total_amount}</b>\n\n"
        f"üìã <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
        f"üìß Email: <code>{zelle_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üì± Phone: <code>{zelle_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üë§ Name: <code>{zelle_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n\n"
        f"üìù <b>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        f"<code>Order #{order_id}</code>\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"üïê –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"upload_receipt:{order_id}")],
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def notify_admins_new_order(user, order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ, —Ç—Ä–µ–±—É—é—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Zelle"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    admin_ids = getattr(settings, 'admin_ids', [])
    
    if not admin_ids:
        logger.warning("No admin IDs configured for notifications")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_data = {
        'order_id': order_id,
        'user_info': {
            'telegram_id': user.id,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'username': user.username
        },
        'action_required': 'setup_zelle',
        'message': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö Zelle —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤'
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    async with api_client as client:
        await client.notify_admin_new_order(notification_data)
    
    logger.info(f"Admin notification sent for order {order_id}, user {user.id}")

@router.callback_query(F.data == "confirm_order", OrderStates.confirming_order)
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart(user_id)
    order_data = await state.get_data()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    api_order_data = {
        'telegram_user_id': user_id,
        'products': [
            {
                'id': item['id'],
                'quantity': item['quantity']
            }
            for item in cart_items
        ],
        'payment_method': order_data['payment_method'],
        'customer_notes': f"Phone: {order_data['phone']}",
        'shipping_address': {
            'full_address': order_data['address'],
            'phone': order_data['phone']
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
    async with api_client as client:
        result = await client.create_order(api_order_data)
    
    if not result or 'order_id' not in result:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard()
        )
        return
    
    order_id = result['order_id']
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cart_service.clear_cart(user_id)
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    if order_data['payment_method'] == 'zelle':
        await handle_zelle_payment(callback, order_id, result['total_amount'], user_id)
    else:  # nowpayments
        await send_crypto_payment_info(callback, order_id, result['total_amount'])

async def send_zelle_payment_info(callback: CallbackQuery, order_id: int, total_amount: float):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Zelle"""
    
    payment_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üíµ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Zelle</b>\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${total_amount}</b>\n\n"
        f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
        f"üìß Email: your-zelle@email.com\n"
        f"üì± Phone: +1234567890\n"
        f"üë§ Name: Your Store Name\n\n"
        f"üìù <b>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        f"<code>Order #{order_id}</code>\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"üïê –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"upload_receipt:{order_id}")],
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def send_crypto_payment_info(callback: CallbackQuery, order_id: int, total_amount: float):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    
    payment_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üíé <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${total_amount}</b>\n\n"
        f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        f"üëÜ –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        f"üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞."
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://payment-link-for-order-{order_id}")],
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

@router.callback_query(F.data == "enter_promocode", OrderStates.confirming_order)
async def enter_promocode(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    
    await state.set_state(OrderStates.entering_promocode_code)
    
    await callback.message.edit_text(
        "üé´ <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data="back_to_confirmation")]
        ])
    )

@router.message(OrderStates.entering_promocode_code)
async def process_promocode(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    
    promocode = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ API
    async with api_client as client:
        result = await client.check_promocode(promocode)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Promocode API response for {promocode}: {result}")
    
    if result.get('valid'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º data –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Laravel API
        promocode_data = result.get('data', result)
        
        discount_percent = (
            promocode_data.get('discount_value') or 
            promocode_data.get('discount_percent') or 
            promocode_data.get('discount') or 
            promocode_data.get('percentage') or 
            promocode_data.get('percent') or 
            promocode_data.get('value') or
            result.get('discount_value') or
            result.get('discount_percent') or 
            result.get('discount') or 
            result.get('percentage') or 
            result.get('percent') or 
            result.get('value') or 0
        )
        
        logger.info(f"Extracted discount_percent: {discount_percent} from promocode_data: {promocode_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–∫–∏–¥–∫–∏
        discount_type = promocode_data.get('discount_type', 'percentage')
        discount_value = float(discount_percent)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –¥–∞–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏
        await state.update_data(
            promocode=promocode,
            discount_type=discount_type,
            discount_value=discount_value
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏
        if discount_type == 'fixed':
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promocode}</b> –ø—Ä–∏–º–µ–Ω–µ–Ω!\n"
                f"üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞: ${discount_value}"
            )
        else:  # percentage
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promocode}</b> –ø—Ä–∏–º–µ–Ω–µ–Ω!\n"
                f"üí∞ –°–∫–∏–¥–∫–∞: {discount_value}%"
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º
        await state.set_state(OrderStates.confirming_order)
        
        user_id = message.from_user.id
        cart_items = cart_service.get_cart(user_id)
        cart_total = cart_service.get_cart_total(user_id)
        order_data = await state.get_data()
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        discount_type = order_data.get('discount_type', 'percentage')
        discount_value = order_data.get('discount_value', 0)
        
        if discount_type == 'fixed':
            discount_amount = min(float(discount_value), cart_total)  # –ù–µ –±–æ–ª—å—à–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
            discount_text = f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode} (-${discount_amount:.2f})\n"
        else:  # percentage
            discount_amount = cart_total * (float(discount_value) / 100)
            discount_text = f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode} (-{discount_value}%)\n"
        
        final_total = cart_total - discount_amount
        
        confirmation_text = (
            "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"{format_order_confirmation(cart_items, cart_total, order_data)}\n\n"
            f"{discount_text}"
            f"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> -${discount_amount:.2f}\n"
            f"üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${final_total:.2f}\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
        )
        
        await message.answer(
            confirmation_text,
            reply_markup=order_confirmation_keyboard()
        )
        
    else:
        await message.answer(
            f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promocode}</b> –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ —Å–∫–∏–¥–∫–∏."
        )

@router.callback_query(F.data == "back_to_confirmation")
async def back_to_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞"""
    
    await state.set_state(OrderStates.confirming_order)
    
    user_id = callback.from_user.id
    cart_items = cart_service.get_cart(user_id)
    cart_total = cart_service.get_cart_total(user_id)
    order_data = await state.get_data()
    
    confirmation_text = (
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"{format_order_confirmation(cart_items, cart_total, order_data)}\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=order_confirmation_keyboard()
    )

async def handle_zelle_payment(callback: CallbackQuery, order_id: int, total_amount: float, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Zelle —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Zelle —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    async with api_client as client:
        zelle_data = await client.get_user_zelle(user_id)
    
    if zelle_data.get('configured', False):
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        await send_personalized_zelle_info(callback, order_id, total_amount, zelle_data)
    else:
        # –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await send_waiting_message(callback, order_id, total_amount)
        await notify_admins_new_order(callback.from_user, order_id)

async def send_waiting_message(callback: CallbackQuery, order_id: int, total_amount: float):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    waiting_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üíµ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${total_amount}</b>\n\n"
        f"‚è≥ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –∂–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>\n\n"
        f"üì± –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã Zelle –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
        f"üïê –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    )
    
    await callback.message.edit_text(
        waiting_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def send_personalized_zelle_info(callback: CallbackQuery, order_id: int, total_amount: float, zelle_data: Dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö Zelle —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    payment_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üíµ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Zelle</b>\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>${total_amount}</b>\n\n"
        f"üìã <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
        f"üìß Email: <code>{zelle_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üì± Phone: <code>{zelle_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        f"üë§ Name: <code>{zelle_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n\n"
        f"üìù <b>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        f"<code>Order #{order_id}</code>\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"üïê –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"upload_receipt:{order_id}")],
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def notify_admins_new_order(user, order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ, —Ç—Ä–µ–±—É—é—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Zelle"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    admin_ids = getattr(settings, 'admin_ids', [])
    
    if not admin_ids:
        logger.warning("No admin IDs configured for notifications")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_data = {
        'order_id': order_id,
        'user_info': {
            'telegram_id': user.id,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'username': user.username
        },
        'action_required': 'setup_zelle',
        'message': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö Zelle —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤'
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    async with api_client as client:
        await client.notify_admin_new_order(notification_data)
    
    logger.info(f"Admin notification sent for order {order_id}, user {user.id}")