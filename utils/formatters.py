from datetime import datetime
from typing import List, Dict, Any


def format_order_details(order: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üßæ –ó–∞–∫–∞–∑ #{order['id']}\n\n"
    text += f"üìÖ –î–∞—Ç–∞: {format_date(order['created_at'])}\n"
    text += f"üìç –ê–¥—Ä–µ—Å: {order['address']}\n"
    text += f"üì¶ –°—Ç–∞—Ç—É—Å: {get_status_emoji(order['status'])} {order['status']}\n\n"
    
    text += "üõí –¢–æ–≤–∞—Ä—ã:\n"
    for item in order.get('items', []):
        text += f"‚Ä¢ {item['product_name']} x{item['quantity']} = {format_price(item['price'] * item['quantity'])}\n"
    
    text += f"\nüí∞ –ò—Ç–æ–≥–æ: {format_price(order['total_amount'])}"
    return text


def format_product_card(product: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    text = f"üì¶ {product['name']}\n\n"
    
    if product.get('description'):
        text += f"üìù {product['description']}\n\n"
    
    text += f"üí∞ –¶–µ–Ω–∞: {format_price(product['price'])}"
    return text


def format_cart_summary(cart_items: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    if not cart_items:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for item in cart_items:
        item_total = item['product']['price'] * item['quantity']
        text += f"‚Ä¢ {item['product']['name']}\n"
        text += f"  {item['quantity']} —à—Ç. √ó {format_price(item['product']['price'])} = {format_price(item_total)}\n\n"
        total += item_total
    
    text += f"üí∞ –ò—Ç–æ–≥–æ: {format_price(total)}"
    return text


def format_price(price_kopecks: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏"""
    rubles = price_kopecks // 100
    kopecks = price_kopecks % 100
    
    if kopecks == 0:
        return f"{rubles} ‚ÇΩ"
    else:
        return f"{rubles}.{kopecks:02d} ‚ÇΩ"


def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return date_str


def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_emojis = {
        'pending': '‚è≥',
        'confirmed': '‚úÖ',
        'preparing': 'üë®‚Äçüç≥',
        'delivering': 'üöö',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    return status_emojis.get(status, '‚ùì')


def format_user_info(user: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    
    if user.get('last_name'):
        text += f" {user['last_name']}"
    
    if user.get('username'):
        text += f" (@{user['username']})"
    
    text += f"\nüì± ID: {user['telegram_id']}"
    
    if user.get('phone'):
        text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}"
    
    return text


def pluralize(count: int, forms: List[str]) -> str:
    """–°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞"""
    if count % 10 == 1 and count % 100 != 11:
        return forms[0]
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return forms[1]
    else:
        return forms[2]


def format_quantity(count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"""
    forms = ['—Ç–æ–≤–∞—Ä', '—Ç–æ–≤–∞—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–≤']
    return f"{count} {pluralize(count, forms)}"